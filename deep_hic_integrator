#! /usr/bin/env python3
# -*- coding: utf-8 -*-

"""

    Integrative Deep-Learning Framework for Analyzing the Interplay between Chromatin Conformation
    and Epigenetics
    Autor: Hélène Kabbech
    Medical Center University of Göttingen (Germany), Institute of Pathologie, Papantonis Lab

    Usage:
        ./deep_hic_integrator <HIC_FILE> <HM_PATH> [--hic_resolution INT]
                                                   [--chr_train INT]
                                                   [--chr_test INT]
                                                   [--hist_mark_train STR]
                                                   [--encoder STR]
                                                   [--decoder STR]
                                                   [--square_side INT]
                                                   [--epochs INT]
                                                   [--batch_size INT]
                                                   [--output PATH]

    Arguments:
        <HIC_FILE>                          Path to the Hi-C matrix file (.hic format)
        <HM_PATH>                           Path to the Histone Modification bed files

    Options:
        -r, INT, --hic_resolution INT       Hi-C matrix resolution to use. [default: 25000]
        -g INT, --chr_train INT             Chromosome used to train the autoencoder [default: 1]
        -t INT, --chr_test INT              Chromosome used to test [default: 20]
        -h STR, --hist_mark_train STR       Histone mark used to train [default: h3k4me3]
        -e STR, --encoder STR               Encoder keras moel [default: None]
        -d STR, --decoder STR               Decoder keras model [default: None]
        -n INT, --square_side INT           Size n*n of a sub-matrix [default: 40]
        -p INT, --epochs INT                Number of epochs [default: 50]
        -b INT, --batch_size INT            Size of a batch [default: 64]
        -o PATH, --output PATH              Output path [default: results/]
        -h, --help                          Show this

"""


# Third-party modules
from datetime import datetime
import os
import random as rd
from schema import Schema, And, Use, SchemaError
import numpy as np
from docopt import docopt
from matplotlib import cm
from matplotlib.colors import ListedColormap
from keras.models import load_model
import cooler
from hic2cool import hic2cool_convert

# Local modules
from src.matrix import Hic, HistoneMark
from src.autoencoder import Autoencoder
from src.interpolation import NormalInterpolation, InterpolationInLatentSpace


def check_args(arguments):
    """
        Checks and validates the types of inputs parsed by docopt from command line.

        Args:
            arguments(class 'docopt.Dict'): The input arguments of the script
    """
    schema = Schema({
        '<HIC_FILE>': Use(open, error='HIC_FILE should be readable'),
        '<HM_PATH>': os.path.exists,
        '--hic_resolution': And(Use(int), lambda n: n%5000 == 0 and 5000 <= n <= 2500000,
                                error='--resolution should be between 5,000 and 2,500,000'),
        '--chr_train': And(Use(int), lambda n: 1 <= n <= 23,
                           error='--train shoud be integer 1<= N <= 23'),
        '--chr_test': And(Use(int), lambda n: 1 <= n <= 23,
                          error='--test shoud be integer 1<= N <= 23'),
        '--square_side': And(Use(int), lambda n: 1 <= n <= 210,
                             error='--square_side shoud be integer 1<= N <= 210'),
        '--epochs': And(Use(int), lambda n: 1 <= n <= 10000,
                        error='--epochs shoud be integer 1<= N <= 10000'),
        '--batch_size': And(Use(int), lambda n: n%16 == 0,
                            error='--batch_size : The rest of the division by 16 should be 0'),
        # The output PATH is created (if not exists) so we skip the check.
        object: object})
    try:
        schema.validate(arguments)
    except SchemaError as err:
        exit(err)

if __name__ == "__main__":

    START_TIME = datetime.now()

    ### PARSE COMMAND LINE
    ######################

    # Arguments parsed by docopt
    ARGS = docopt(__doc__)
    # Check the types and ranges of the arguments
    check_args(ARGS)

    # Files containing the matrices

    # Histone mark sparse matrices
    HM_FILENAMES = {} # Dictionary of the histone marks (key: histone mark name, value: filename)
    for r, _, f in os.walk(ARGS['<HM_PATH>']):
        for file in f:
            HM_FILENAMES[file.split('.')[0]] = r+'/'+file

    # Files containing the Hi-C matrix
    RESOLUTION = int(ARGS['--hic_resolution']) # Resolution of the matrices
    HIC_FILENAME = ARGS['<HIC_FILE>'] # .hic format
    COOL_FILENAME = HIC_FILENAME.split('.hic')[0]+'_'+str(RESOLUTION)+'.cool' # .cool format
    # Conversion from .hic to .cool
    if not os.path.exists(COOL_FILENAME):
        hic2cool_convert(HIC_FILENAME, COOL_FILENAME, RESOLUTION)

    # Parameters of the deep-learning framework :
    CHR_TRAIN = int(ARGS['--chr_train']) # Chromosome used to train the autoencoder
    CHR_TEST = int(ARGS['--chr_test']) # Chromosome used to test
    HIST_MARK_TRAIN = ARGS['--hist_mark_train'] # Histone mark used to train the autoencoder
    SIDE = int(ARGS['--square_side']) # Side of a sub-matrix
    EPOCHS = int(ARGS['--epochs'])
    BATCH_SIZE = int(ARGS['--batch_size'])

    # Parameter for the interpolation
    ALPHAS = [0, 0.25, 0.5, 0.75, 1]

    # Creation of the output paths :
    MODEL_PATH = ARGS['--output']+'/model/'
    os.makedirs(MODEL_PATH+'/plot/', exist_ok=True)
    os.makedirs(MODEL_PATH+'/autoencoder/', exist_ok=True)
    TEST_PATH = ARGS['--output']+'/test_chr'+str(CHR_TEST)+'/'
    os.makedirs(TEST_PATH+'/true_matrices/plot_matrices/', exist_ok=True)
    os.makedirs(TEST_PATH+'/true_matrices/plot_sub-matrices/', exist_ok=True)
    os.makedirs(TEST_PATH+'/true_matrices/sparse_matrix/', exist_ok=True)
    os.makedirs(TEST_PATH+'/integrated_matrices/in_latent_space/plot_matrices/', exist_ok=True)
    os.makedirs(TEST_PATH+'/integrated_matrices/in_latent_space/plot_sub-matrices/', exist_ok=True)
    os.makedirs(TEST_PATH+'/integrated_matrices/in_latent_space/sparse_matrix/', exist_ok=True)
    os.makedirs(TEST_PATH+'/integrated_matrices/normal/plot_matrices/', exist_ok=True)
    os.makedirs(TEST_PATH+'/integrated_matrices/normal/plot_sub-matrices/',
                exist_ok=True)
    os.makedirs(TEST_PATH+'/integrated_matrices/normal/sparse_matrix/', exist_ok=True)

    # Refine color map for the plots :
    RED_CMP = ListedColormap(np.vstack((np.array([1, 1, 1, 1]),
                                        cm.get_cmap('Reds', 300)(np.linspace(0, 1, 300)))))

    ### AUTOENCODER
    ###############

    ENCODER_FILENAME = ARGS['--encoder']
    DECODER_FILENAME = ARGS['--decoder']

    # The user gave in input a trained autoencoder (encoder and decoder models)
    if ENCODER_FILENAME != 'None' and DECODER_FILENAME != 'None':
        ENCODER = load_model(ENCODER_FILENAME)
        DECODER = load_model(DECODER_FILENAME)

    # If not, the autoencoder is trained with the Hi-C matrix and a histone mark of the CHR_TRAIN
    else:
        TRAIN_HIC = Hic(cooler.Cooler(COOL_FILENAME), RESOLUTION, CHR_TRAIN, SIDE)
        TRAIN_HIC.set_matrix()
        TRAIN_HIC.plot_matrix('Hi-C', RED_CMP, MODEL_PATH+'/plot/')
        TRAIN_HIC.set_sub_matrices()

        TRAIN_HM = HistoneMark(HM_FILENAMES[HIST_MARK_TRAIN], RESOLUTION, CHR_TRAIN, SIDE)
        TRAIN_HM.set_matrix()
        TRAIN_HM.plot_matrix(HIST_MARK_TRAIN, RED_CMP, MODEL_PATH+'/plot/')
        TRAIN_HM.set_sub_matrices()

        # The autoencoder will be train with the sub-matrices of TRAIN_HIC and TRAIN_HM
        TRAIN = np.concatenate((TRAIN_HIC.sub_matrices, TRAIN_HM.sub_matrices), 0)
        AE = Autoencoder(TRAIN, SIDE, EPOCHS, BATCH_SIZE)
        AE.set_models()
        AE.compile()
        AE.train()
        AE.save_model(MODEL_PATH+'/autoencoder/')
        AE.plot_loss_curve(MODEL_PATH+'/plot/')
        AE.plot_accuracy_curve(MODEL_PATH+'/plot/')

        ENCODER = AE.encoder
        DECODER = AE.decoder

        # All the parameters of the training are saved in a log file.
        TIME = datetime.now() - START_TIME
        with open(MODEL_PATH+'/parameters.log', 'w') as file:
            file.write('Hi-C parameters:\n Resolution: {}\n Size sub-matrices: {}*{}\n\n'
                       .format(RESOLUTION, SIDE, SIDE))
            file.write('Train:\n Chromosome: {}\n Shape matrix: {}\n Shape sub_matrices: {}\n\n'
                       .format(TRAIN_HIC.chrom_num, TRAIN_HIC.matrix.shape,
                               TRAIN_HIC.sub_matrices.shape))
            file.write('Autoencoder parameters:\n Epochs: {}\n Batch size: {}\n'
                       .format(EPOCHS, BATCH_SIZE))
            file.write(' Optimizer: {}\n Loss function: {}\n Metrics: {}\n\n'
                       .format(AE.cae.optimizer, AE.cae.loss, AE.cae.metrics))
            file.write('Running time: {}h {}min'.format(TIME.seconds//3600, TIME.seconds//60%60))


    ### INTERGRATION
    ################

    # Hi-C matrix to integrate
    HIC = Hic(cooler.Cooler(COOL_FILENAME), RESOLUTION, CHR_TEST, SIDE)
    HIC.set_matrix()
    HIC.set_sub_matrices()
    HIC.set_predicted_latent_spaces(ENCODER.predict(HIC.sub_matrices))
    HIC.set_predicted_sub_matrices(DECODER.predict(HIC.latent_spaces))
    RANDOM_INDEX_LIST = rd.sample(range(0, HIC.sub_matrices.shape[0]), 40)
    HIC.plot_sub_matrices('Hi-C', RANDOM_INDEX_LIST, RED_CMP,
                          TEST_PATH+'/true_matrices/plot_sub-matrices/')
    HIC.plot_matrix('Hi-C', RED_CMP, TEST_PATH+'/true_matrices/plot_matrices/')
    HIC.write_sparse_matrix('Hi-C', TEST_PATH+'/true_matrices/sparse_matrix/')


    # Histone marks to integrate
    HM = {}
    for key, value in HM_FILENAMES.items():
        HM[key] = HistoneMark(value, RESOLUTION, CHR_TEST, SIDE)
        HM[key].set_matrix()
        HM[key].set_sub_matrices()
        HM[key].set_predicted_latent_spaces(ENCODER.predict(HM[key].sub_matrices))
        HM[key].set_predicted_sub_matrices(DECODER.predict(HM[key].latent_spaces))
        HM[key].plot_sub_matrices(key, RANDOM_INDEX_LIST, RED_CMP,
                                  TEST_PATH+'/true_matrices/plot_sub-matrices/')
        HM[key].plot_matrix(key, RED_CMP, TEST_PATH+'/true_matrices/plot_matrices/')
        HM[key].write_sparse_matrix(key, TEST_PATH+'/true_matrices/sparse_matrix/')

    # Interpolation of the predicted Hi-C with the predicted histone marks
    NORMAL_IP = NormalInterpolation(ALPHAS)
    NORMAL_IP.interpolate_predicted_img(HM, HIC.predicted_sub_matrices)
    NORMAL_IP.construct_integrated_matrix(HIC)
    NORMAL_IP.plot_interpolated_submatrices(HIC, RANDOM_INDEX_LIST, RED_CMP, TEST_PATH+\
                                    '/integrated_matrices/normal/plot_sub-matrices/')
    NORMAL_IP.plot_integrated_matrix(HIC, RED_CMP, TEST_PATH+'/integrated_matrices/normal/'+
                                     'plot_matrices/')
    NORMAL_IP.write_predicted_sparse_matrix(HIC, TEST_PATH+'/integrated_matrices/normal/'+\
                                            'sparse_matrix/')

    # Interpolation in the latent space of the Hi-C and histone marks
    IP_LS = InterpolationInLatentSpace(ALPHAS)
    IP_LS.interpolate_latent_spaces(HM, HIC.latent_spaces)
    IP_LS.set_decoded_latent_spaces(DECODER)
    IP_LS.construct_integrated_matrix(HIC)
    IP_LS.plot_interpolated_submatrices(HIC, RANDOM_INDEX_LIST, RED_CMP, TEST_PATH+\
                                       '/integrated_matrices/in_latent_space/plot_sub-matrices/')
    IP_LS.plot_integrated_matrix(HIC, RED_CMP, TEST_PATH+'/integrated_matrices/in_latent_space/'+\
                                 'plot_matrices/')
    IP_LS.write_predicted_sparse_matrix(HIC, TEST_PATH+'/integrated_matrices/in_latent_space/'+
                                        'sparse_matrix/')


    ### TIMER
    ##########

    TIME = datetime.now() - START_TIME
    HOURS = TIME.seconds // 3600
    MINUTES = TIME.seconds // 60 % 60
    print('\nTotal runtime: {}h {}min'.format(HOURS, MINUTES))


    ### SAVE PARAMETERS
    ###################

    with open(TEST_PATH+'/parameters.log', 'w') as file:
        file.write('Hi-C parameters:\n Resolution: {}\n Size sub-matrices: {}*{}\n\n'
                   .format(RESOLUTION, SIDE, SIDE))
        file.write('Test:\n Chromosome: {}\n Shape matrix: {}\n Shape sub_matrices: {}\n\n'
                   .format(HIC.chrom_num, HIC.matrix.shape, HIC.sub_matrices.shape))
        file.write('Histone marks: {}\n\n'.format(HM.keys()))
        file.write('Running time: {}h {}min'.format(HOURS, MINUTES))
