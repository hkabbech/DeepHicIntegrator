#! /usr/bin/env python3
# -*- coding: utf-8 -*-

"""

    Integrative deep-learning framework for analyzing the interplay between chromatin conformation
    and epigenetics
    Autor: Hélène Kabbech, Institute of Pathologie, Medical Center University of Göttingen (Germany)

    Usage:
        ./deep_hic_integrator <HIC_FILE> <HM_PATH> [--resolution INT]
                                                   [--chr_train INT]
                                                   [--chr_test INT]
                                                   [--hist_mark_train STR]
                                                   [--square_side INT]
                                                   [--epochs INT]
                                                   [--batch_size INT]
                                                   [--encoder STR]
                                                   [--decoder STR]
                                                   [--output PATH]
                                                   [--help]

    Arguments:
        <HIC_FILE>                          Path of the Hi-C matrix file (.hic format)
        <HM_PATH>                           Path of the repository containing the histone mark files

    Options:
        -r INT, --resolution INT           Resolution representing the number of pair-ended reads
                                            spanning between a pair of bins. [default: 25000]
        -a INT, --chr_train INT             Chromosome used to train the autoencoder [default: 1]
        -t INT, --chr_test INT              Chromosome used to test the autoencoder [default: 20]
        -m STR, --hist_mark_train STR       Name of the histone mark used to train the autoencoder
                                            [default: h3k4me3]
        -n INT, --square_side INT           Size N*N of a sub-matrix [default: 20]
        -p INT, --epochs INT                Number of epochs for the training [default: 50]
        -b INT, --batch_size INT            Batch size for the training [default: 64]
        -e STR, --encoder STR               Trained encoder model (H5 format) [default: None]
        -d STR, --decoder STR               Trained decoder model (H5 format) [default: None]
        -o PATH, --output PATH              Output path [default: results/]
        -h, --help                          Show this

"""


# Third-party modules
from datetime import datetime
import os
import random as rd
from schema import Schema, And, Use, SchemaError
import numpy as np
from docopt import docopt
from matplotlib import cm
from matplotlib.colors import ListedColormap
from keras.models import load_model
import cooler
from hic2cool import hic2cool_convert

# Local modules
from src.matrix import Hic, HistoneMark
from src.autoencoder import Autoencoder
from src.interpolation import NormalInterpolation, InterpolationInLatentSpace


def check_args(arguments):
    """
        Checks and validates the types of inputs parsed by docopt from command line.

        Args:
            arguments(class 'docopt.Dict'): The input arguments of the script
    """
    schema = Schema({
        '<HIC_FILE>': Use(open, error='HIC_FILE should be readable'),
        '<HM_PATH>': os.path.exists,
        '--resolution': And(Use(int), lambda n: n > 0,
                            error='--resolution should be a positive integer'),
        '--chr_train': And(Use(int), lambda n: 1 <= n <= 23,
                           error='--chr_train shoud be integer 1<= N <= 23'),
        '--chr_test': And(Use(int), lambda n: 1 <= n <= 23,
                          error='--chr_test shoud be integer 1<= N <= 23'),
        '--square_side': And(Use(int), lambda n: n > 0,
                             error='--square_side shoud be a positive integer'),
        '--epochs': And(Use(int), lambda n: n > 0,
                        error='--epochs shoud be a positive integer'),
        '--batch_size': And(Use(int), lambda n: n%16 == 0,
                            error='--batch_size : The rest of the division by 16 should be 0'),
        # The output PATH is created (if not exists) so we skip the check.
        object: object})
    try:
        schema.validate(arguments)
    except SchemaError as err:
        exit(err)

def save_train_parameters():
    """
        Parameters of the training are saved in a log file.
    """
    with open(MODEL_PATH+'/parameters.log', 'w') as filout:
        filout.write('Hi-C parameters:\n Resolution: {}\n Size sub-matrices: {}*{}\n\n'
                     .format(RESOLUTION, SIDE, SIDE))
        filout.write('Train:\n Chromosome: {}\n Shape matrix: {}\n Shape sub_matrices: {}\n\n'
                     .format(TRAIN_HIC.chrom_num, TRAIN_HIC.matrix.shape,
                             TRAIN_HIC.sub_matrices.shape))
        filout.write('Autoencoder parameters:\n Epochs: {}\n Batch size: {}\n'
                     .format(EPOCHS, BATCH_SIZE))
        filout.write(' Optimizer: {}\n Loss function: {}\n Metrics: {}\n\n'
                     .format(AE.cae.optimizer, AE.cae.loss, AE.cae.metrics))


def save_test_parameters():
    """
        Parameters of the test are saved in a log file.
    """
    with open(TEST_PATH+'/parameters.log', 'w') as filout:
        filout.write('Hi-C parameters:\n Resolution: {}\n Size sub-matrices: {}*{}\n\n'
                     .format(RESOLUTION, SIDE, SIDE))
        filout.write('Test:\n Chromosome: {}\n Shape matrix: {}\n Shape sub_matrices: {}\n\n'
                     .format(HIC.chrom_num, HIC.matrix.shape, HIC.sub_matrices.shape))
        filout.write('Histone marks: {}\n\n'.format(HM.keys()))
        filout.write('Running time: {}h {}min'.format(HOURS, MINUTES))

if __name__ == "__main__":

    START_TIME = datetime.now()

    ### PARSE COMMAND LINE
    ######################

    # Arguments parsed by docopt
    ARGS = docopt(__doc__)
    # Check the types and ranges of the arguments
    check_args(ARGS)

    # Files containing the histone mark sparse matrices
    HM_FILENAMES = {} # Dictionary of the histone marks (key: histone mark, value: file name)
    for r, _, f in os.walk(ARGS['<HM_PATH>']):
        for file in f:
            HM_FILENAMES[file.split('.')[0]] = r+'/'+file

    # Files containing the Hi-C matrix
    RESOLUTION = int(ARGS['--resolution']) # Resolution of the matrices
    HIC_FILENAME = ARGS['<HIC_FILE>'] # .hic format
    COOL_FILENAME = HIC_FILENAME.split('.hic')[0]+'_'+str(RESOLUTION)+'.cool' # .cool format
    # Conversion from .hic to .cool
    if not os.path.exists(COOL_FILENAME):
        hic2cool_convert(HIC_FILENAME, COOL_FILENAME, RESOLUTION)

    # Parameters of the deep-learning framework
    CHR_TRAIN = int(ARGS['--chr_train']) # Chromosome used to train the autoencoder
    CHR_TEST = int(ARGS['--chr_test']) # Chromosome used to test
    HIST_MARK_TRAIN = ARGS['--hist_mark_train'] # Name of the histone mark used for the training
    SIDE = int(ARGS['--square_side']) # Side of a sub-matrix
    EPOCHS = int(ARGS['--epochs']) # Number of epochs
    BATCH_SIZE = int(ARGS['--batch_size']) # Batch size

    # Parameter for the interpolation
    ALPHAS = [0, 0.25, 0.5, 0.75, 1]

    # Creation of the output paths :
    MODEL_PATH = ARGS['--output']+'/model/'
    os.makedirs(MODEL_PATH+'/plot/', exist_ok=True)
    os.makedirs(MODEL_PATH+'/autoencoder/', exist_ok=True)
    TEST_PATH = ARGS['--output']+'/test_chr'+str(CHR_TEST)+'/'
    os.makedirs(TEST_PATH+'/true_matrices/plot_matrices/', exist_ok=True)
    os.makedirs(TEST_PATH+'/true_matrices/plot_sub-matrices/', exist_ok=True)
    os.makedirs(TEST_PATH+'/true_matrices/sparse_matrix/', exist_ok=True)
    os.makedirs(TEST_PATH+'/integrated_matrices/in_latent_space/plot_matrices/', exist_ok=True)
    os.makedirs(TEST_PATH+'/integrated_matrices/in_latent_space/plot_sub-matrices/', exist_ok=True)
    os.makedirs(TEST_PATH+'/integrated_matrices/in_latent_space/sparse_matrix/', exist_ok=True)
    os.makedirs(TEST_PATH+'/integrated_matrices/normal/plot_matrices/', exist_ok=True)
    os.makedirs(TEST_PATH+'/integrated_matrices/normal/plot_sub-matrices/', exist_ok=True)
    os.makedirs(TEST_PATH+'/integrated_matrices/normal/sparse_matrix/', exist_ok=True)

    # Refine color map for the plots :
    RED_CMP = ListedColormap(np.vstack((np.array([1, 1, 1, 1]),
                                        cm.get_cmap('Reds', 300)(np.linspace(0, 1, 300)))))


    ### AUTOENCODER
    ###############

    # The user gave in input a trained autoencoder (encoder and decoder models)
    print('1. get models')
    if ARGS['--encoder'] != 'None' and ARGS['--decoder'] != 'None':
        ENCODER = load_model(ARGS['--encoder'])
        DECODER = load_model(ARGS['--decoder'])

    # If not, the autoencoder is train with the Hi-C and histone mark of CHR_TRAIN
    else:
        # Set and divide the Hi-C data
        TRAIN_HIC = Hic(cooler.Cooler(COOL_FILENAME), RESOLUTION, CHR_TRAIN, SIDE)
        TRAIN_HIC.set_matrix()
        TRAIN_HIC.set_sub_matrices()
        TRAIN_HIC.plot_matrix('Hi-C', RED_CMP, MODEL_PATH+'/plot/')
        TRAIN_HIC.plot_distribution_matrix('Hi-C', MODEL_PATH+'/plot/')
        # Set and divide the histone mark data
        TRAIN_HM = HistoneMark(HM_FILENAMES[HIST_MARK_TRAIN], RESOLUTION, CHR_TRAIN, SIDE)
        TRAIN_HM.set_matrix()
        TRAIN_HM.set_sub_matrices()
        TRAIN_HM.plot_matrix(HIST_MARK_TRAIN, RED_CMP, MODEL_PATH+'/plot/')
        TRAIN_HM.plot_distribution_matrix('Hi-C', MODEL_PATH+'/plot/')

        # The autoencoder will be trained with the sub-matrices of both TRAIN_HIC and TRAIN_HM
        TRAIN = np.concatenate((TRAIN_HIC.sub_matrices, TRAIN_HM.sub_matrices), 0)
        AE = Autoencoder(TRAIN, SIDE, EPOCHS, BATCH_SIZE)
        AE.set_models()
        AE.compile()
        AE.train()
        AE.save_model(MODEL_PATH+'/autoencoder/')
        AE.plot_loss_curve(MODEL_PATH+'/plot/')
        AE.plot_accuracy_curve(MODEL_PATH+'/plot/')
        ENCODER = AE.encoder
        DECODER = AE.decoder
        save_train_parameters()


    ### INTERGRATION
    ################

    # Set and divide the Hi-C data
    print('2. Hi-C')
    HIC = Hic(cooler.Cooler(COOL_FILENAME), RESOLUTION, CHR_TEST, SIDE)
    print('2.1 set matrix')
    HIC.set_matrix()
    print('2.2 set sub-matrices')
    HIC.set_sub_matrices()
    print('2.3 predictions')
    print('2.3.1 predictions 1')
    HIC.set_predicted_latent_spaces(ENCODER.predict(HIC.sub_matrices))
    print('2.3.2 predictions 2')
    HIC.set_predicted_sub_matrices(DECODER.predict(ENCODER.predict(HIC.sub_matrices)))
    RANDOM_INDEX_LIST = rd.sample(range(0, HIC.sub_matrices.shape[0]), 40)
    print('2.4 plots')
    HIC.plot_sub_matrices('Hi-C', RANDOM_INDEX_LIST, RED_CMP,
                          TEST_PATH+'/true_matrices/plot_sub-matrices/')
    HIC.plot_matrix('Hi-C', RED_CMP, TEST_PATH+'/true_matrices/plot_matrices/')
    HIC.write_sparse_matrix('Hi-C', TEST_PATH+'/true_matrices/sparse_matrix/')

    # Set and divide each histone mark data
    HM = {}
    for key, value in HM_FILENAMES.items():
        print('3. {}'.format(key))
        HM[key] = HistoneMark(value, RESOLUTION, CHR_TEST, SIDE)
        HM[key].set_matrix()
        HM[key].set_sub_matrices()
        HM[key].set_predicted_latent_spaces(ENCODER.predict(HM[key].sub_matrices))
        HM[key].set_predicted_sub_matrices(DECODER.predict(ENCODER.predict(HM[key].sub_matrices)))
        HM[key].plot_sub_matrices(key, RANDOM_INDEX_LIST, RED_CMP,
                                  TEST_PATH+'/true_matrices/plot_sub-matrices/')
        HM[key].plot_matrix(key, RED_CMP, TEST_PATH+'/true_matrices/plot_matrices/')
        HM[key].write_sparse_matrix(key, TEST_PATH+'/true_matrices/sparse_matrix/')

    # Interpolation of the predicted matrix Hi-C with the predicted matrices histone marks
    print('4. interpolation')
    print('4.1 normal')
    NORMAL_IP = NormalInterpolation(ALPHAS)
    NORMAL_IP.interpolate_predicted_img(HM, HIC.predicted_sub_matrices)
    NORMAL_IP.construct_integrated_matrix(HIC)
    NORMAL_IP.plot_interpolated_submatrices(HIC, RANDOM_INDEX_LIST, RED_CMP, TEST_PATH+\
                                    '/integrated_matrices/normal/plot_sub-matrices/')
    NORMAL_IP.plot_integrated_matrix(HIC, RED_CMP, TEST_PATH+'/integrated_matrices/normal/'+
                                     'plot_matrices/')
    NORMAL_IP.write_predicted_sparse_matrix(HIC, TEST_PATH+'/integrated_matrices/normal/'+\
                                            'sparse_matrix/')

    # Interpolation in the latent space of the Hi-C and histone marks
    print('4.1 latent space')
    IP_LS = InterpolationInLatentSpace(ALPHAS)
    IP_LS.interpolate_latent_spaces(HM, HIC.latent_spaces)
    IP_LS.set_decoded_latent_spaces(DECODER, SIDE)
    IP_LS.construct_integrated_matrix(HIC)
    IP_LS.plot_interpolated_submatrices(HIC, RANDOM_INDEX_LIST, RED_CMP, TEST_PATH+\
                                       '/integrated_matrices/in_latent_space/plot_sub-matrices/')
    IP_LS.plot_integrated_matrix(HIC, RED_CMP, TEST_PATH+'/integrated_matrices/in_latent_space/'+\
                                 'plot_matrices/')
    IP_LS.write_predicted_sparse_matrix(HIC, TEST_PATH+'/integrated_matrices/in_latent_space/'+
                                        'sparse_matrix/')

    TIME = datetime.now() - START_TIME
    HOURS = TIME.seconds // 3600
    MINUTES = TIME.seconds // 60 % 60
    print('\nTotal runtime: {}h {}min'.format(HOURS, MINUTES))
    save_test_parameters()
