#! /usr/bin/env python3
# -*- coding: utf-8 -*-

"""

    Integrative Deep-Learning Framework for Analyzing Native Spatial Chromatin Dynamics.
    Auteurs: Hélène Kabbech and Eduardo Gade Gusmão
    Medical Center University of Göttingen (Germany), Institute of Pathologie, Papantonis Lab

    Usage:
        ./deep_hic_integrator <HIC_FILE> [--resolution INT] [--train INT] [--test INT]
                                         [--square_side INT] [--epochs INT] [--batch_size INT]
                                         [--output PATH]

    Arguments:
        <HIC_FILE>                      Path to the Hi-C matrix file
                                        (.hic format)

    Options:
        -r, INT, --resolution INT       Hi-C matrice resolution to use. [default: 25000]
        -a INT, --train INT             Chromosome for training [default: 1]
        -t INT, --test INT              Chromosome for test [default: 20]
        -n INT, --square_side INT       Size n*n of a sub-matrix [default: 60]
        -e INT, --epochs INT            Number of epochs [default: 50]
        -b INT, --batch_size INT        Size of a batch [default: 128]
        -o PATH, --output PATH          Output path [default: output/]
        -h, --help                      Show this

"""


# Third-party modules
from datetime import datetime
import os
import random as rd
from schema import Schema, And, Use, SchemaError
import numpy as np
from docopt import docopt
from keras.layers import Input
from matplotlib import cm
from matplotlib.colors import ListedColormap
import cooler
from hic2cool import hic2cool_convert


# Local modules
from src.hic import Hic
from src.predict_hic import PredictHic
from src.autoencoder import Autoencoder


def check_args(arguments):
    """
        Checks and validates the types of inputs parsed by docopt from command line.

        Args:
            arguments(class 'docopt.Dict'): The input arguments of the script
    """
    schema = Schema({
        '<HIC_FILE>': Use(open, error='HIC_FILE should be readable'),
        '--resolution': And(Use(int), lambda n: n%5000 == 0 and 5000 <= n <= 2500000,
                            error='--resolution should be between 5,000 and 2,500,000'),
        '--train': And(Use(int), lambda n: 1 <= n <= 23,
                       error='--train shoud be integer 1<= N <= 23'),
        '--test': And(Use(int), lambda n: 1 <= n <= 23,
                      error='--test shoud be integer 1<= N <= 23'),
        '--square_side': And(Use(int), lambda n: 1 <= n <= 210,
                             error='--square_side shoud be integer 1<= N <= 23'),
        '--epochs': And(Use(int), lambda n: 1 <= n <= 10000,
                        error='--epochs shoud be integer 1<= N <= 10000'),
        '--batch_size': And(Use(int), lambda n: n%16 == 0,
                            error='--batch_size : The rest of the division by 16 should be 0'),
        # The output PATH is created (if not exists) so we skip the check.
        object: object})
    try:
        schema.validate(arguments)
    except SchemaError as err:
        exit(err)

if __name__ == "__main__":

    START_TIME = datetime.now()

    ### PARSE COMMAND LINE
    ######################

    ARGS = docopt(__doc__)
    # Check the types and ranges of the command line arguments parsed by docopt
    check_args(ARGS)

    # Resolution of the Hi-C matrix
    RESOLUTION = int(ARGS['--resolution'])

    # Files containing the Hi-C matrix
    HIC_FILE = ARGS['<HIC_FILE>']
    COOL_FILE = HIC_FILE.split('.hic')[0]+'_'+str(RESOLUTION)+'.cool'
    # Conversion from .hic to .cool
    if not os.path.exists(COOL_FILE):
        hic2cool_convert(HIC_FILE, COOL_FILE, RESOLUTION)

    # Chromosome for training
    CHROM_TRAIN = int(ARGS['--train'])
    # Chromosome for test
    CHROM_TEST = int(ARGS['--test'])

    # Parameters of the deep-learning framework
    N = int(ARGS['--square_side'])
    EPOCHS = int(ARGS['--epochs'])
    BATCH_SIZE = int(ARGS['--batch_size'])

    # Output paths
    MODEL_PATH = ARGS['--output']+'/model/'
    os.makedirs(MODEL_PATH, exist_ok=True)
    TEST_PATH = ARGS['--output']+'/test_chr'+str(CHROM_TEST)+'/'
    os.makedirs(TEST_PATH, exist_ok=True)

    # Refine color map for the plots
    REDS = cm.get_cmap('Reds', 300)
    CMP = ListedColormap(np.vstack((np.array([1, 1, 1, 1]), REDS(np.linspace(0, 1, 300)))))


    ### TRAINING OF THE MODEL
    #########################

    TRAIN = Hic(cooler.Cooler(COOL_FILE), CHROM_TRAIN, N)
    TRAIN.set_matrix()
    TRAIN.plot_matrix(CMP, MODEL_PATH)
    TRAIN.set_sub_matrices()

    AE = Autoencoder(Input(shape=(N, N, 1)), TRAIN)
    AE.compile_model()
    AE.train_model(BATCH_SIZE, EPOCHS)


    ### TEST OF THE MODEL
    #####################

    TEST = PredictHic(cooler.Cooler(COOL_FILE), CHROM_TEST, N)
    TEST.set_matrix()
    TEST.set_sub_matrices()
    TEST.set_predicted_sub_matrices(AE.model.predict(TEST.sub_matrices))
    TEST.construct_predicted_matrix()
    TEST.write_predicted_matrix(0.1, TEST_PATH)

    # Plots
    RANDOM_INDEX_LIST = rd.sample(range(0, TEST.sub_matrices.shape[0]), 40)
    TEST.plot_sub_matrices(CMP, TEST_PATH, RANDOM_INDEX_LIST)
    TEST.plot_predicted_sub_matrices(CMP, TEST_PATH, RANDOM_INDEX_LIST)
    TEST.plot_matrix(CMP, TEST_PATH)
    TEST.plot_predicted_matrix(CMP, TEST_PATH)


    ### SAVE PARAMETERS
    ###################

    AE.save_model(MODEL_PATH)
    AE.plot_loss_curve(EPOCHS, MODEL_PATH)
    AE.plot_accuracy_curve(EPOCHS, MODEL_PATH)
    TIME = datetime.now() - START_TIME
    AE.save_parameters(MODEL_PATH, RESOLUTION, N, TEST, EPOCHS, BATCH_SIZE, TIME)

    print("\nTotal runtime: {}.{} seconds".format(TIME.seconds, TIME.microseconds))
